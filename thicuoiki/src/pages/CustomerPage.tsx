import React, { useEffect, useState } from "react";
import { Table, Button, Space, Input, Modal, Form, message, Card, Row, Col } from "antd";
import { Customer, fetchAllCustomers, createCustomer, updateCustomer, deleteCustomer } from "../api/customer.api";
import { EditOutlined, DeleteOutlined, UserOutlined } from "@ant-design/icons";


const CustomerPage: React.FC = () => {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [loading, setLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [currentCustomer, setCurrentCustomer] = useState<Partial<Customer>>({});
  const [searchText, setSearchText] = useState("");
  const [form] = Form.useForm();

  useEffect(() => {
    loadCustomers();
  }, []);

  const loadCustomers = async () => {
    setLoading(true);
    try {
      const data = await fetchAllCustomers();
      setCustomers(Array.isArray(data?.customers) ? data.customers : []);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch kh√°ch h√†ng:", error);
    }
    setLoading(false);
  };

  const handleSave = async () => {
    try {
      const values = await form.validateFields();
      if (currentCustomer.id) {
        const response = await updateCustomer(currentCustomer.id, values);
        if(response?.customer){
          message.success(response?.message);
        }else{
          message.error(response?.message);
        }

      } else {
        const response = await createCustomer(values);
        if(response?.customer){
          message.success(response?.message);
        }else{
          message.error(response?.message);
        }

      }
      setIsModalOpen(false);
      loadCustomers();
    } catch {
      message.error("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  const handleEdit = (customer: Customer) => {
    setCurrentCustomer(customer);
    form.setFieldsValue(customer);
    setIsModalOpen(true);
  };

  const confirmDelete = (customer: Customer) => {
    setCurrentCustomer(customer);
    setIsDeleteModalOpen(true);
  };

  const handleDelete = async () => {
    if (currentCustomer.id) {
      const response = await deleteCustomer(currentCustomer.id);
      if(response?.isSuccess){
          message.success(response.message);
      }else{
        message.error(response?.message)
      }

      loadCustomers();
    }
    setIsDeleteModalOpen(false);
  };

  const filteredCustomers = customers.filter(c =>
    (c.fullName?.toLowerCase() || "").includes(searchText.toLowerCase()) ||
    (c.phone?.toLowerCase() || "").includes(searchText.toLowerCase()) ||
    (c.id?.toString() || "").includes(searchText) ||
    (c.address?.toLowerCase() || "").includes(searchText)
  );

  return (
    <div style={{ padding: "20px", fontFamily: "Arial, sans-serif" }}>
      <style>
      {`
        .gray-row {
          background-color: #f5f5f5 !important;
        }
      `}
    </style>
    <Card title={<span style={{ fontSize: "24px", fontWeight: "bold" }}>
    <UserOutlined
        style={{
          color: "#1890ff",     // M√†u xanh d∆∞∆°ng (chuy√™n nghi·ªáp)
          fontSize: 28,         // TƒÉng k√≠ch th∆∞·ªõc cho n·ªïi b·∫≠t
          marginRight: 10,
          backgroundColor: "#e6f7ff",  // Vi·ªÅn n·ªÅn nh·∫π
          borderRadius: "50%",
          padding: 6
        }}
      />
      Qu·∫£n l√Ω kh√°ch h√†ng</span>}
      bordered={false}
      style={{ marginBottom: 20, padding: 20 }}>
  <Row gutter={[16, 16]} justify="space-between" align="middle">
    <Col xs={24} sm={16}>
      <Input
        placeholder="üîç T√¨m ki·∫øm theo m√£, t√™n, s·ªë ƒëi·ªán tho·∫°i, ƒë·ªãa ch·ªâ"
        value={searchText}
        onChange={(e) => setSearchText(e.target.value)}
        style={{ width: "100%", maxWidth: "400px", marginBottom: "10px" }}
      />
    </Col>
    <Col xs={24} sm={8} style={{ textAlign: "right" }}>
    <Button
      type="primary"
      onClick={() => {
        setCurrentCustomer({});
        form.resetFields();
        setIsModalOpen(true);
      }}
      style={{ width: "100%", maxWidth: "30px" }} // Gi·∫£m k√≠ch th∆∞·ªõc n√∫t
      size="middle"  // ƒê·∫∑t k√≠ch th∆∞·ªõc nh·ªè cho n√∫t
    >
      +
    </Button>

    </Col>
  </Row>
</Card>

<Table
  dataSource={filteredCustomers}
  loading={loading}
  rowKey="id"
  pagination={{ pageSize: 6 }}
  rowClassName={(_, index) => (index % 2 === 0 ? "gray-row" : "")} // Th√™m m√†u xen k·∫Ω
  columns={[
    { title: "M√£ kh√°ch h√†ng", dataIndex: "id", key: "id", align: "right", width: 120, onHeaderCell: () => ({ style: { textAlign: "left" } }) },
    { title: "T√™n", dataIndex: "fullName", key: "fullName" },
    { title: "S·ªë ƒëi·ªán tho·∫°i", dataIndex: "phone", key: "phone", align: "right", onHeaderCell: () => ({ style: { textAlign: "left" } }) },
    { title: "ƒê·ªãa ch·ªâ", dataIndex: "address", key: "address" },
    {
      title: "Thao t√°c",
      key: "actions",
      align: "center",
      render: (_, record) => (
        <Space size="middle">
          <Button
            type="primary"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          />
          <Button
            type="primary"
            danger
            icon={<DeleteOutlined />}
            onClick={() => confirmDelete(record)}
          />
        </Space>
      ),
    }
  ]}
/>

<Modal
  title={currentCustomer.id ? "‚úèÔ∏è Ch·ªânh s·ª≠a kh√°ch h√†ng" : "‚ûï Th√™m kh√°ch h√†ng"}
  open={isModalOpen}
  onCancel={() => setIsModalOpen(false)}
  width={700} // M·ªü r·ªông modal cho tho√°ng
  footer={[
    <Button key="submit" type="primary" onClick={handleSave}>
      {currentCustomer.id ? "L∆∞u" : "L∆∞u"}
    </Button>,
  ]}
>
  <Card bordered={false}>
    <Form form={form} layout="vertical">
      <Row gutter={16}>
        {/* C·ªôt 1: T√™n kh√°ch h√†ng */}
        <Col span={12}>
          <Form.Item
            name="fullName"
            label="üë§ T√™n kh√°ch h√†ng"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n kh√°ch h√†ng" }]}
          >
            <Input placeholder="Nh·∫≠p t√™n kh√°ch h√†ng" />
          </Form.Item>
        </Col>

        {/* C·ªôt 2: S·ªë ƒëi·ªán tho·∫°i */}
        <Col span={12}>
          <Form.Item
            name="phone"
            label="üìû S·ªë ƒëi·ªán tho·∫°i"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" },
              { pattern: /^[0-9]{10}$/, message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ ƒë√∫ng 10 ch·ªØ s·ªë" },
            ]}
          >
            <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
          </Form.Item>
        </Col>
      </Row>

      {/* ƒê·ªãa ch·ªâ (Full width) */}
      <Form.Item name="address" label="üìç ƒê·ªãa ch·ªâ">
        <Input.TextArea rows={2} placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ kh√°ch h√†ng" />
      </Form.Item>
    </Form>
  </Card>
</Modal>

{/* Modal x√°c nh·∫≠n x√≥a */}
<Modal
  title="‚ö†Ô∏è X√°c nh·∫≠n x√≥a kh√°ch h√†ng"
  open={isDeleteModalOpen}
  onOk={handleDelete}
  onCancel={() => setIsDeleteModalOpen(false)}
  okText="üóëÔ∏è X√≥a"
  okButtonProps={{ danger: true }}
  cancelButtonProps={{ style: { display: "none" } }} // ·∫®n n√∫t "H·ªßy"
>
  <p style={{ fontSize: "16px", fontWeight: "bold", color: "#ff4d4f" }}>
    B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√°ch h√†ng n√†y kh√¥ng?
  </p>
  <p><strong>üè∑Ô∏è M√£ kh√°ch h√†ng:</strong> {currentCustomer?.id?.toString()}</p>
  <p><strong>üë§ T√™n:</strong> {currentCustomer.fullName}</p>
  <p><strong>üìû S·ªë ƒëi·ªán tho·∫°i:</strong> {currentCustomer.phone}</p>
  <p><strong>üìç ƒê·ªãa ch·ªâ:</strong> {currentCustomer.address}</p>
</Modal>
    </div>
  );
};

export default CustomerPage;
